Set up and initialize your Terraform workspace
1. Clone the repository use for this example.
    1. git clone https://github.com/hashicorp/learn-terraform-provision-eks-cluster
        1. Don't have to do if already done.
2. Change into the cloned repository directory.
    1. cd learn-terraform-provision-eks-cluster
        1. Should contain the below files.
            1. vpc.tf provisions a VPC, subnets and availability zones using the AWS VPC Module. A new VPC is created for this tutorial so it doesn't impact your existing cloud environment and resources.
            2. security-groups.tf provisions the security groups used by the EKS cluster.
            3. eks-cluster.tf provisions all the resources (AutoScaling Groups, etc...) required to set up an EKS cluster using the AWS EKS Module.
            4. outputs.tf defines the output configuration.
            5. versions.tf sets the Terraform version to at least 0.14. It also sets versions for the providers used in this sample.
3. Download and configure the providers by initializing your Terraform workspace.
    1, terraform init
4. Apply the initiation.
    1. terraform apply
    2. Review and type yes then enter
        1. May take 10 minutes or so.
5. Check the changes made.
    1. cat outputs.tf
    
    
Configure kubectl
1. aws eks --region $(terraform output -raw region) update-kubeconfig --name $(terraform output -raw cluster_name)
   1. Fails until you run terraform init and terraform apply.


Deploy and access Kubernetes Dashboard steps (how to execute steps are below)
1. Deploy Kubernetes Metrics Server
2. Deploy Kubernetes Dashboard
3. Acceess, Authenticate, and Test the dashboard



Deploy Kubernetes Metrics Server
1. wget -O v0.3.6.tar.gz https://codeload.github.com/kubernetes-sigs/metrics-server/tar.gz/v0.3.6 && tar -xzf v0.3.6.tar.gz
2. kubectl apply -f metrics-server-0.3.6/deploy/1.8+/
3. kubectl get deployment metrics-server -n kube-system


Deploy Kubernetes Dashboard
1. Run in terminal 
    1. kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml
    2. kubectl proxy


Acceess, Authenticate, and Test the dashboard
1. Access the dashboard website. 
    1. http://127.0.0.1:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
1. Run in ANOTHER terminal 
    1. kubectl apply -f https://raw.githubusercontent.com/hashicorp/learn-terraform-provision-eks-cluster/main/kubernetes-dashboard-admin.rbac.yaml
    2. kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep service-controller-token | awk '{print $1}')
2. Copy and paste the token receive from the previous command into the webpage then click sign in.
3. Click cluster on the left side of the webpage.
    1. You should be able to see a list of nodes.
4. Log into AWS console and stop/terminate 1 or 2 of the EC2 isntaces.  
    1. Notice that they chaged the dashboard.
    2.  Wait a few minutes for the more EC2 instaces to be created and notice the change on the dashboard.





